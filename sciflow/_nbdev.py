# AUTOGENERATED BY NBDEV! DO NOT EDIT!

__all__ = ["index", "modules", "custom_doc_links", "git_url"]

index = {"clean_cell": "clean.ipynb",
         "sciflow_clean_nbs": "clean.ipynb",
         "sciflow_clean": "clean.ipynb",
         "supported_parameters": "data_handler.ipynb",
         "supported_args": "data_handler.ipynb",
         "supported_conversion_args": "data_handler.ipynb",
         "suppported_types": "data_handler.ipynb",
         "ParamMeta": "data_handler.ipynb",
         "load_module": "data_handler.ipynb",
         "extract_param_meta": "data_handler.ipynb",
         "extract_named_export": "export_named.ipynb",
         "is_export_extended": "export_named.ipynb",
         "set_orig_value": "export_named.ipynb",
         "sciflow_build_lib": "export_named.ipynb",
         "env_file_blank": "init.ipynb",
         "write_env_file": "init.ipynb",
         "read_env_file": "init.ipynb",
         "edit_pythonpath": "init.ipynb",
         "write_edited_pythonpath": "init.ipynb",
         "sciflow_init": "init.ipynb",
         "file_to_mime_type_map": "lake_experiment.ipynb",
         "Artifact": "lake_experiment.ipynb",
         "ImageArtifact": "lake_experiment.ipynb",
         "MP4Artifact": "lake_experiment.ipynb",
         "CSVArtifact": "lake_experiment.ipynb",
         "PickleArtifact": "lake_experiment.ipynb",
         "PDFArtifact": "lake_experiment.ipynb",
         "content_type_to_artifact_cls": "lake_experiment.ipynb",
         "LakeExperiment": "lake_experiment.ipynb",
         "MAX_CACHE_SIZE": "lake_experiment_loader.ipynb",
         "LakeExpLoader": "lake_experiment_loader.ipynb",
         "DEFAULT_S3_PRIORITY": "lake_observer.ipynb",
         "AWSLakeObserver": "lake_observer.ipynb",
         "reqs_file_to_sep_str": "packaging.ipynb",
         "run_py_module": "packaging.ipynb",
         "determine_dependencies": "packaging.ipynb",
         "reqs_lines_to_sep_str": "packaging.ipynb",
         "update_requirements": "packaging.ipynb",
         "create_conda_meta_file": "packaging.ipynb",
         "sciflow_update_reqs": "packaging.ipynb",
         "delete_multiple_element": "packaging.ipynb",
         "read_deploy_vars": "packaging.ipynb",
         "write_art_conda_envs_to_file": "packaging.ipynb",
         "correct_pypirc": "packaging.ipynb",
         "sciflow_prepare": "packaging.ipynb",
         "find_params_cell": "params.ipynb",
         "extract_params": "params.ipynb",
         "DEFAULT_PARAMS_CELL": "params.ipynb",
         "add_missing_params_cell": "params.ipynb",
         "extract_params_to_file": "params.ipynb",
         "list_mod_files": "params.ipynb",
         "extract_as_files": "params.ipynb",
         "extract_params_as_dict": "params.ipynb",
         "params_as_dict": "params.ipynb",
         "extract_step_code": "parse_module.ipynb",
         "FuncLister": "parse_module.ipynb",
         "FuncDetails": "parse_module.ipynb",
         "pp": "parse_module.ipynb",
         "extract_return_stmt": "parse_module.ipynb",
         "parse_step": "parse_module.ipynb",
         "extract_steps": "parse_module.ipynb",
         "extract_dag": "parse_module.ipynb",
         "is_valid_bucket": "s3_utils.ipynb",
         "s3_join": "s3_utils.ipynb",
         "objects_exist_in_dir": "s3_utils.ipynb",
         "delete_dir": "s3_utils.ipynb",
         "bucket_exists": "s3_utils.ipynb",
         "list_s3_subdirs": "s3_utils.ipynb",
         "upload_directory": "to_sagemaker.ipynb",
         "download_directory": "s3_utils.ipynb",
         "S3File": "s3_utils.ipynb",
         "run_nbqa_cmd": "scilint.ipynb",
         "sciflow_tidy": "scilint.ipynb",
         "get_function_defs": "scilint.ipynb",
         "count_func_calls": "scilint.ipynb",
         "calc_tpf": "scilint.ipynb",
         "tpf": "scilint.ipynb",
         "something": "test_clustering_no_params.ipynb",
         "nb_cell_code": "scilint.ipynb",
         "ifp": "scilint.ipynb",
         "mcr": "scilint.ipynb",
         "tcl": "scilint.ipynb",
         "traffic_percent": "test_clustering_no_params.ipynb",
         "workers": "test_clustering_no_params.ipynb",
         "model_level": "test_clustering_no_params.ipynb",
         "min_date": "test_clustering_no_params.ipynb",
         "get_traffic_text": "test_clustering_no_params.ipynb",
         "get_experiment_segment": "test_clustering_no_params.ipynb",
         "get_utterances": "test_clustering_no_params.ipynb",
         "preprocess": "test_export.ipynb",
         "Topics": "test_clustering_no_params.ipynb",
         "fit": "test_clustering_no_params.ipynb",
         "evaluate": "test_clustering_no_params.ipynb",
         "serve_num_topics": "test_clustering_no_params.ipynb",
         "int_param": "test_data_handling.ipynb",
         "float_param": "test_data_handling.ipynb",
         "str_param": "test_data_handling.ipynb",
         "input_path": "test_export.ipynb",
         "model_path": "test_export.ipynb",
         "dict_param": "test_data_handling.ipynb",
         "list_param": "test_data_handling.ipynb",
         "ones": "test_data_handling.ipynb",
         "text": "test_data_handling.ipynb",
         "series_param": "test_data_handling.ipynb",
         "df_param": "test_data_handling.ipynb",
         "scalar": "test_data_handling.ipynb",
         "py_advanced": "test_data_handling.ipynb",
         "pandas": "test_data_handling.ipynb",
         "some_params": "test_export.ipynb",
         "some_param": "test_export.ipynb",
         "first": "test_export.ipynb",
         "function": "test_export.ipynb",
         "created_new_module": "test_export.ipynb",
         "internal": "test_export.ipynb",
         "source_in_docs": "test_export.ipynb",
         "train": "test_export.ipynb",
         "last": "test_export.ipynb",
         "titleize": "to_metaflow.ipynb",
         "rename_steps_for_metaflow": "to_metaflow.ipynb",
         "indent_multiline": "to_metaflow.ipynb",
         "nb_to_metaflow": "to_metaflow.ipynb",
         "extract_module_only": "to_metaflow.ipynb",
         "write_module_to_file": "to_metaflow.ipynb",
         "write_observers": "to_sagemaker.ipynb",
         "config": "to_metaflow.ipynb",
         "ex": "to_metaflow.ipynb",
         "obs": "to_metaflow.ipynb",
         "write_track_flow": "to_sagemaker.ipynb",
         "write_params": "to_sagemaker.ipynb",
         "format_arg": "to_sagemaker.ipynb",
         "write_steps": "to_sagemaker.ipynb",
         "write_track_capture": "to_sagemaker.ipynb",
         "get_module_name": "to_metaflow.ipynb",
         "get_flow_path": "to_metaflow.ipynb",
         "generate_flows": "to_metaflow.ipynb",
         "sciflow_generate": "to_metaflow.ipynb",
         "check_flows": "to_metaflow.ipynb",
         "prep_mf_env": "to_metaflow.ipynb",
         "run_shell_cmd": "to_metaflow.ipynb",
         "check_flow": "to_metaflow.ipynb",
         "run_flow": "to_metaflow.ipynb",
         "run_flow_task": "to_metaflow.ipynb",
         "run_flow_async": "to_metaflow.ipynb",
         "iter_param_grid": "to_metaflow.ipynb",
         "sample_grid_space": "to_metaflow.ipynb",
         "search_flow_grid": "to_metaflow.ipynb",
         "sciflow_check_flows": "to_metaflow.ipynb",
         "sciflow_run_flows": "to_metaflow.ipynb",
         "nb_to_sagemaker_pipeline": "to_sagemaker.ipynb",
         "is_train_step": "to_sagemaker.ipynb",
         "is_processing_step": "to_sagemaker.ipynb",
         "write_pipeline_to_files": "to_sagemaker.ipynb",
         "extract_step_vars": "to_sagemaker.ipynb",
         "format_job_arguments": "to_sagemaker.ipynb",
         "format_hyperparams": "to_sagemaker.ipynb",
         "get_return_var_names": "to_sagemaker.ipynb",
         "format_args": "to_sagemaker.ipynb",
         "generate_sagemaker_modules": "to_sagemaker.ipynb",
         "lib_path": "utils.ipynb",
         "load_nb": "utils.ipynb",
         "load_nb_module": "utils.ipynb",
         "prepare_env": "utils.ipynb",
         "odbc_connect": "utils.ipynb",
         "query": "utils.ipynb"}

modules = ["clean.py",
           "data_handler.py",
           "export_named.py",
           "init.py",
           "experiment/lake_experiment.py",
           "experiment/lake_experiment_loader.py",
           "experiment/lake_observer.py",
           "packaging.py",
           "params.py",
           "parse_module.py",
           "s3_utils.py",
           "scilint.py",
           "test/test_clustering.py",
           "test/test_clustering_no_params.py",
           "test/test_data_handling.py",
           "test/test_export.py",
           "test/test_module.py",
           "to_metaflow.py",
           "to_sagemaker.py",
           "utils.py"]

doc_url = "https://newdaytechnology.github.io/sciflow/"

git_url = "https://github.com/newdaytechnology/sciflow/tree/{branch}/"

def custom_doc_links(name): return None
