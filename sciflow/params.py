# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/params.ipynb.

# %% auto 0
__all__ = ['DEFAULT_PARAMS_CELL', 'supported_parameters', 'supported_args', 'supported_conversion_args', 'suppported_types',
           'find_params_cell', 'add_missing_params_cell', 'extract_params', 'extract_params_to_file', 'list_mod_files',
           'extract_as_files', 'extract_params_as_dict', 'params_as_dict', 'ParamMeta', 'load_module',
           'extract_param_meta']

# %% ../nbs/params.ipynb 3
# | export

import os
import sys
from dataclasses import dataclass
from importlib import import_module
from io import StringIO
from pathlib import Path
from typing import Any, Dict, Iterable, List

import nbformat
import numpy as np
import pandas as pd
from execnb.nbio import read_nb
from nbdev.config import get_config
from nbdev.doclinks import nbglob
from nbformat.notebooknode import NotebookNode

# %% ../nbs/params.ipynb 7
# | export


def find_params_cell(nb: NotebookNode):
    params_cell = [c for c in nb["cells"] if c["metadata"] == {"tags": ["parameters"]}]
    return params_cell

# %% ../nbs/params.ipynb 10
# | export

DEFAULT_PARAMS_CELL = {
    "cell_type": "code",
    "execution_count": None,
    "metadata": {"tags": ["parameters"]},
    "outputs": [],
    "source": "# parameters\n",
}

# %% ../nbs/params.ipynb 12
# | export


def add_missing_params_cell(nb_path: Path, persist: bool = True):
    nb = read_nb(nb_path)
    if len(find_params_cell(nb)) > 0:
        print(f"Skipping {nb_path} already has parameters cell")
        return
    nb["cells"].insert(0, nbformat.from_dict(DEFAULT_PARAMS_CELL))
    if persist:
        nbformat.write(nb, nb_path)
    return nb

# %% ../nbs/params.ipynb 16
# | export


def extract_params(nb: NotebookNode):
    params_cell = find_params_cell(nb)
    return params_cell[0]["source"] if len(params_cell) > 0 else None

# %% ../nbs/params.ipynb 19
# | export


def extract_params_to_file(nb_path: Path, params_file_path: Path):
    params_code = extract_params(read_nb(Path(test_nb)))
    with open(params_file_path, "w") as params_file:
        params_file.writelines(params_code)

# %% ../nbs/params.ipynb 22
# | export


def list_mod_files(files):
    modules = []
    for f in files:
        fname = Path(f)
        nb = read_nb(fname)
        default = find_default_export(nb["cells"])
        if default is not None:
            default = os.path.sep.join(default.split("."))
            modules.append(default)
    return modules

# %% ../nbs/params.ipynb 24
# | export


def extract_as_files(suffix="_params.py"):
    nbs = nbglob(recursive=True)
    param_files = list_mod_files(nbs)
    params_files = [
        Path(os.path.join(get_config().path("lib_path"), pf + suffix))
        for pf in param_files
    ]
    for nb_path, pf_path in zip(nbs, params_files):
        extract_params_to_file(nb_path, pf_path)

# %% ../nbs/params.ipynb 26
# | exporti


def _lines_to_dict(lines: Iterable[str]):
    result = {}
    for line in lines:
        if line.startswith("#") or not "=" in line:
            continue
        (key, val) = line.split("=")
        result[key.strip()] = val.strip('\n "')
    return result

# %% ../nbs/params.ipynb 28
# | export


def extract_params_as_dict(params_file_path: Path):
    params = {}
    with open(params_file_path, "r") as params_file:
        params = _lines_to_dict(params_file.readlines())
    return params

# %% ../nbs/params.ipynb 31
# | export


def params_as_dict(nb_path: Path):
    params_code = extract_params(read_nb(nb_path))
    params = _lines_to_dict(StringIO(params_code).readlines())
    return params

# %% ../nbs/params.ipynb 36
# | export

supported_parameters = (str, int, float, bool)
supported_args = (Dict, List)
supported_conversion_args = (pd.Series, pd.DataFrame, np.ndarray, Path)
suppported_types = []
suppported_types.extend(supported_parameters)
suppported_types.extend(supported_args)
suppported_types.extend(supported_conversion_args)

# %% ../nbs/params.ipynb 38
# | export


@dataclass
class ParamMeta:
    instance_type: type
    is_scalar: bool
    is_json_type: bool
    persist_type: str
    has_metaflow_param: bool
    has_sagemaker_param: bool

# %% ../nbs/params.ipynb 40
# | export


def load_module(fully_qualified_module_name):
    root_path = str(get_config().path("root_path"))
    if not root_path in sys.path:
        sys.path.append(root_path)
    package = ".".join(fully_qualified_module_name.split(".")[:-1])
    fully_qualified_module_name.split(".")[-1]
    module = import_module(fully_qualified_module_name, package)
    return module

# %% ../nbs/params.ipynb 45
# | export


def extract_param_meta(module_name: str, params: Dict[str, Any]):
    module = load_module(module_name)
    param_vals = {}
    for k in params.keys():
        param_vals[k] = getattr(module, k)
    param_meta = {}

    for key, val in param_vals.items():
        if any([isinstance(val, t) for t in supported_parameters]):
            param_meta[key] = ParamMeta(
                instance_type=type(val),
                is_scalar=True,
                is_json_type=False,
                persist_type="pickle",
                has_metaflow_param=True,
                has_sagemaker_param=True,
            )
        elif any([isinstance(val, t) for t in supported_args]):
            param_meta[key] = ParamMeta(
                instance_type=type(val),
                is_scalar=False,
                is_json_type=True,
                persist_type="pickle",
                has_metaflow_param=True,
                has_sagemaker_param=False,
            )
        elif any([isinstance(val, t) for t in supported_conversion_args]):
            if isinstance(val, np.ndarray):
                param_meta[key] = ParamMeta(
                    instance_type=type(val),
                    is_scalar=False,
                    is_json_type=False,
                    persist_type="numpy",
                    has_metaflow_param=False,
                    has_sagemaker_param=False,
                )
            elif isinstance(val, pd.Series) or isinstance(val, pd.DataFrame):
                param_meta[key] = ParamMeta(
                    instance_type=type(val),
                    is_scalar=False,
                    is_json_type=False,
                    persist_type="pandas",
                    has_metaflow_param=False,
                    has_sagemaker_param=False,
                )
            elif isinstance(val, Path):
                param_meta[key] = ParamMeta(
                    instance_type=type(val),
                    is_scalar=False,
                    is_json_type=False,
                    persist_type="pickle",
                    has_metaflow_param=True,
                    has_sagemaker_param=False,
                )
        else:
            param_meta[key] = ParamMeta(
                instance_type=type(val),
                is_scalar=False,
                is_json_type=False,
                persist_type="unsupported",
                has_metaflow_param=False,
                has_sagemaker_param=False,
            )
    return param_meta
