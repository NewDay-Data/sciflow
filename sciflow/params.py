# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/params.ipynb (unless otherwise specified).

__all__ = ['find_params_cell', 'DEFAULT_PARAMS_CELL', 'add_missing_params_cell', 'extract_params_to_file',
           'list_mod_files', 'extract_as_files', 'extract_params_as_dict']

# Cell

from pathlib import Path

import nbformat
from nbdev.export import Config, find_default_export, nbglob, read_nb
from nbformat.notebooknode import NotebookNode

# Cell


def find_params_cell(nb: NotebookNode):
    params_cell = [c for c in nb["cells"] if c["metadata"] == {"tags": ["parameters"]}]
    return params_cell

# Cell

DEFAULT_PARAMS_CELL = {
    "cell_type": "code",
    "execution_count": None,
    "metadata": {"tags": ["parameters"]},
    "outputs": [],
    "source": "# parameters\n",
}

# Cell


def add_missing_params_cell(nb_path: Path, persist: bool = True):
    nb = read_nb(nb_path)
    if len(find_params_cell(nb)) > 0:
        print(f"Skipping {nb_path} already has parameters cell")
        return
    nb["cells"].insert(0, nbformat.from_dict(DEFAULT_PARAMS_CELL))
    if persist:
        nbformat.write(nb, nb_path)
    return nb

# Cell


def extract_params_to_file(nb_path: Path, params_file_path: Path):
    with open(params_file_path, "w") as params_file:
        params_file.writelines(params_cell[0]["source"])

# Cell


def list_mod_files(files):
    modules = []
    for f in files:
        fname = Path(f)
        nb = read_nb(fname)
        default = find_default_export(nb["cells"])
        if default is not None:
            default = os.path.sep.join(default.split("."))
            modules.append(default)
    return modules

# Cell


def extract_as_files(suffix="_params.py"):
    nbs = nbglob(recursive=True)
    param_files = list_mod_files(nbs)
    params_files = [
        Path(os.path.join(Config().path("lib_path"), pf + suffix)) for pf in param_files
    ]
    for nb_path, pf_path in zip(nbs, params_files):
        extract_params_to_file(nb_path, pf_path)

# Cell


def extract_params_as_dict(params_file_path: Path):
    params = {}
    with open(params_file_path, "r") as params_file:
        for line in params_file:
            if line.startswith("#"):
                continue
            (key, val) = line.split("=")
            params[key.strip()] = val.strip('\n "')
    return params