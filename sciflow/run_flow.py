# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/run_flow.ipynb (unless otherwise specified).

__all__ = ['run_shell_cmd', 'make_shell_cmd', 'check_call_flow', 'check_call_flows', 'flow_task', 'run_flow_async',
           'sciflow_check_metaflows', 'sciflow_check_sagemaker_flows', 'sciflow_run_metaflows',
           'sciflow_run_sagemaker_flows']

# Cell


import asyncio
import multiprocessing
import os
import subprocess
import sys
from itertools import product
from pathlib import Path
from typing import Any, Dict, Iterable

import pandas as pd
from fastcore.script import call_parse
from nbdev.export import find_default_export, get_config, read_nb

from .utils import get_flow_path, prepare_env

# Cell


def run_shell_cmd(script: str):
    pipe = subprocess.Popen(
        "%s" % script, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True
    )
    output = pipe.communicate()[0]
    return pipe, output.decode("utf-8").strip()

# Cell


def make_shell_cmd(flow_nb_path, flow_provider="metaflow", flow_command="show", params=None):
    prepare_env()
    if flow_nb_path.suffix == ".ipynb":
        flow_path = get_flow_path(flow_nb_path, flow_provider=flow_provider)
    else:
        flow_path = flow_nb_path
    if params:
        args = " ".join([f"--{k} {v}" for k, v in params.items()])

        flow_command = f"{flow_command} {args}"

    return f"python '{flow_path}' {flow_command}"

# Cell


def check_call_flow(
    flow_nb_path, flow_provider="metaflow", flow_command="show", params=None
):
    cmd = make_shell_cmd(flow_nb_path, flow_provider, flow_command, params)
    pipe, output = run_shell_cmd(cmd)
    return pipe.returncode, output

# Cell


def check_call_flows(
    config,
    flow_provider="metaflow",
    flow_command="show",
    ignore_suffix=None,
    exit_on_error=True,
):
    flow_results = {}
    flows_dir = Path(config.path("flows_path"), flow_provider)

    if ignore_suffix:
        flow_file_names = [
            p for p in os.listdir(flows_dir) if not p.endswith(ignore_suffix)
        ]
    else:
        flow_file_names = os.listdir(flows_dir)
    ret_codes = []
    exit_code = 0
    for flow_file_name in flow_file_names:
        flow_name = os.path.basename(flow_file_name)
        if flow_file_name.startswith("_sciflow"):
            continue
        if flow_file_name.endswith(".py"):
            ret_code, output = check_call_flow(
                Path(flows_dir, flow_file_name), flow_command=flow_command
            )
            flow_results[flow_name] = ret_code, output
            if ret_code == 0:
                print(f"Flow: {flow_name} {flow_command} verified")
            else:
                print(
                    f"Flow: {flow_name} {flow_command} verification failed\nDetails:\n{output}"
                )
            ret_codes.append(ret_code)
    if any([rc != 0 for rc in ret_codes]):
        exit_code = 1
        try:
            # Exit with an error code if running from a non interactive Python environment.
            get_ipython().__class__.__name__
        except NameError:
            if exit_on_error:
                return sys.exit(exit_code)
    return exit_code

# Cell

async def flow_task(flow_nb_path, flow_provider="metaflow", flow_command="run", params=None):
    cmd = make_shell_cmd(flow_nb_path, flow_provider, flow_command, params)

    proc = await asyncio.create_subprocess_shell(
        cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
    )

    stdout, stderr = await proc.communicate()

    output = None
    print(f"[{cmd!r} exited with {proc.returncode}]")
    if stderr:
        print(f'[stderr]\n{stderr.decode("utf-8").strip()}')
    if stdout:
        output = stdout.decode("utf-8").strip()
        print(f"[stdout]\n{output}")

    return proc.returncode, output

# Cell


def run_flow_async(flow_nb_path, flow_provider="metaflow", flow_command="run", params=None):
    loop = asyncio.get_event_loop()
    task = loop.create_task(flow_task(flow_nb_path, flow_provider, flow_command, params))
    return task

# Cell


@call_parse
def sciflow_check_metaflows():
    check_call_flows(get_config())

# Cell


@call_parse
def sciflow_check_sagemaker_flows():
    check_call_flows(get_config(), flow_provider = "sagemaker")

# Cell


@call_parse
def sciflow_run_metaflows():
    check_call_flows(get_config(), flow_command = "--no-pylint run")

# Cell


@call_parse
def sciflow_run_sagemaker_flows():
    check_call_flows(get_config(), flow_command = "run", flow_provider = "sagemaker")