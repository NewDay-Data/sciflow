# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/test/test_multistep.ipynb.

# %% auto 0
__all__ = ['traffic_percent', 'workers', 'model_level', 'min_date', 'get_traffic_text', 'get_experiment_segment',
           'get_utterances', 'Topics', 'serve_num_topics']

# %% ../../nbs/test/test_multistep.ipynb 6
import numpy as np
import pandas as pd

# %% ../../nbs/test/test_multistep.ipynb 8
traffic_percent = 1
workers = 8
model_level = "dispatcher"
min_date = "2021-01-01"

# %% ../../nbs/test/test_multistep.ipynb 9
def get_traffic_text(percent):
    return str(percent) if int(percent) >= 10 else "0" + str(percent)

# %% ../../nbs/test/test_multistep.ipynb 13
def get_experiment_segment(traffic_percent):
    return tuple(get_traffic_text(tp) for tp in range(traffic_percent))

# %% ../../nbs/test/test_multistep.ipynb 15
def get_utterances(model_level=None, min_date=None, traffic_percent=100):
    """
    You will probably call data preparation code here. To simplify dependencies we are just creating synthetic data instead.
    """
    get_experiment_segment(traffic_percent)
    dummy_data = pd.Series(
        np.random.choice(
            [
                "Hello",
                "Goodbye",
                "Hi",
                "Can you help?",
                "I have an issue, can you help me?",
            ],
            100,
        ),
        name="utterance",
    )
    return dummy_data

# %% ../../nbs/test/test_multistep.ipynb 19
class Topics:
    def __init__(self, documents, workers):
        pass

    def get_num_topics(self):
        return 6

    def get_topic_sizes(self):
        return [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]

    def get_topics(self, num_topics):
        return (
            ["cat", "sat", "mat", "mouse", "house", "grouse"],
            np.asarray([1, 1, 1, 1, 1, 1]),
            [1, 2, 3, 4, 5, 6],
        )

    def plot_wordcloud(self):
        print("you may want to remove plotting code from testing to speed things up")

# %% ../../nbs/test/test_multistep.ipynb 36
def serve_num_topics(model):
    return model.get_num_topics()
