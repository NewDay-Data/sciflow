# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/utils.ipynb (unless otherwise specified).

__all__ = ['lib_path', 'sciflow_clean', 'shell_source', 'load_dremio_access']

# Cell

import os
import subprocess
from pathlib import Path

import nbdev
from data_access.dremio_access import DremioAccess
from fastcore.script import call_parse
from nbdev.clean import nbdev_clean_nbs
from nbqa.find_root import find_project_root

# Cell


def lib_path(*lib_relative_path):
    lib_root_path = find_project_root(srcs=(str(Path('.').resolve()), ))
    return Path(os.path.join(lib_root_path, *lib_relative_path))

# Cell


@call_parse
def sciflow_clean():
    nbdev.clean.cell_metadata_keep = nbdev.clean.cell_metadata_keep + ["tags"]
    nbdev_clean_nbs()

# Cell


def shell_source(script):
    """Sometime you want to emulate the action of "source" in bash,
    settings some environment variables. Here is a way to do it.
    From: https://stackoverflow.com/questions/7040592/calling-the-source-command-from-subprocess-popen
    """

    pipe = subprocess.Popen(". %s; env" % script, stdout=subprocess.PIPE, shell=True)
    output = pipe.communicate()[0]
    env = dict((line.split("=", 1) for line in output.decode("utf-8").splitlines()))
    os.environ.update(env)

# Cell


def load_dremio_access():
    if os.path.exists("/home/jovyan/.auth/dremio"):
        with open("/home/jovyan/.auth/dremio", "r") as pat_file:
            pat = pat_file.read().strip()
            DremioAccess._get_dremio_password = lambda x: pat
    else:
        shell_source("/home/jovyan/.profile")
        if "DREMIO_PWD" in os.environ:
            DremioAccess._get_dremio_password = lambda x: os.environ["DREMIO_PWD"]
    return DremioAccess()